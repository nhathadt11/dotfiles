#alias python=python3
#alias pip=pip3
alias dockeroff='docker stop $(docker ps -aq)'
alias dockeron='docker start $(docker ps -aq)'
alias dockerres='docker restart $(docker ps -aq)'
alias dockerdel='docker rmi $(docker images -q)'
alias dockerkill='docker kill $(docker ps -q)'

alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
local _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
local _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always %'"

# use with care
__with_prompt() {
  printf 'Are you sure (y/n)? '
  read answer

  if [ "$answer" != "${answer#[Yy]}" ] ;then
    eval "$@"
  fi
}

# fshow_preview - git commit browser with previews
fgpshow() {
  glNoGraph |
    fzf --no-sort --reverse --tiebreak=index --multi \
        --ansi --preview $_viewGitLogLine \
        --header "enter to view, alt-y to copy hash" \
        --bind "enter:execute:$_viewGitLogLine   | less -R" \
        --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

# fh - repeat history
fh() {
   print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# c - browse chrome history
fch() {
  local cols sep google_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
    open=open
  else
    google_history="$HOME/.config/google-chrome/Default/History"
    open=xdg-open
  fi
  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# python simple HTTP server
pssv() {
  python -m SimpleHTTPServer 8000
}
pssv3() {
	python -m http.server 8000
}

# gitignore.io cli
function gi() {
  curl -L -s https://www.gitignore.io/api/$@ >> .gitignore
}

# file preview
function fzp() {
	fzf --preview 'head -100 {}'
}

# Git branch checkout with fuzzy
fbr() {
  git fetch
  local branches branch
  branches=$(git branch -a) &&
  branch=$(echo "$branches" | fzf +s +m -e) &&
  git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}

# heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=$HOME/.cache/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;

# Android Home
export ANDROID_HOME=$HOME/development/Android/sdk
export ANDROID_SDK_ROOT=$ANDROID_HOME

# Yarn bin
export PATH="$(yarn global bin):$PATH"

# Rgc
[[ -s "/etc/grc.zsh" ]] && source /etc/grc.zsh

# mssql-tools
export PATH="$PATH:/opt/mssql-tools/bin"

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# dotnet core
export MSBuildSDKsPath=/opt/dotnet/sdk/$(dotnet --version)/Sdks

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# rbenv
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"

# rust
export PATH="$HOME/.cargo/bin:$PATH"

# grc
[[ -s "/etc/grc.zsh" ]] && source /etc/grc.zsh

# anaconda
export PATH="/usr/local/anaconda3/bin:$PATH"

# codex keybind
bindkey '^X' create_completion

# java
export PATH="/opt/homebrew/opt/openjdk/bin:$PATH"

usejava() {
  versions=("1.8" "11" "16" "21")

  if [ -z "$@" ]; then
    echo "No version selected"
    return 0
  fi

  if [ 21 = $@ ]; then # from OpenJDK
    export JAVA_HOME="/opt/homebrew/opt/openjdk"
    export PATH="$JAVA_HOME/bin:$PATH"
    echo "Set JAVA_HOME=$JAVA_HOME"
    echo $(java -version)
    return 0
  fi

  for v in ${versions[*]}; do
    if [ $v = $@ ]; then # from AdoptOpenJDK
      export JAVA_HOME=$(/usr/libexec/java_home -v$@)
      export PATH="$JAVA_HOME/bin:$PATH"
      echo "Set JAVA_HOME=$JAVA_HOME"
      echo $(java -version)
      return 0
    fi
  done

  echo "Unsupported java version $@. See $(declare -p versions)"
}

# Huggingface
export TRANSFORMER_CACHE=$HOME/.cache/huggingface/hub

# Obsidian
export OBSIDIAN_PATH="$HOME/Library/Mobile Documents/iCloud~md~obsidian/Documents"

# Terraform
autoload -U +X bashcompinit && bashcompinit
complete -o nospace -C $(which terraform) terraform

# lower
lower() {
  echo "$@" | tr '[:upper:]' '[:lower:]'
}

# kpp
kpp() {
  # Kill process associated with a specific port
  pid=$(lsof -t -i:$@)

  if [ -n "$pid" ]; then
      echo "Process running on port $@ with PID: $pid. Terminating..."
      kill -9 $pid
  else
      echo "No process found running on port $@."
  fi
}

# showcert
showcert() {
  openssl s_client -showcerts -connect "$@":443 -servername $@
}

# fzfc to preview file
fzfc() {
  fzf --preview 'bat --color=always {} --theme="Coldark-Cold"' --preview-window '~3'
}

# new notebook
newnb() {
  if [ -z "$@" ]; then
    notebook_name="Untitled"
  else
    notebook_name="$@"
  fi

  cat > "$notebook_name.ipynb" <<EOF
{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "# $@"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "$@"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {},
      "outputs": [],
      "source": []
    }
  ],
  "metadata": {},
  "nbformat": 4,
  "nbformat_minor": 2
}
EOF
}

# see diff from HEAD~n
gdh() {
  git diff HEAD~$@..HEAD
}

# ncdu by default, du as fallback
duh() {
  if command -v ncdu; then
    ncdu --color off
  else
    du -sh * | sort -hr
  fi
}

# automatically commit all and push
acp() {
  if [ -z "$(git status --porcelain)" ]; then
    echo "Nothing to commit, boy!"
    return 0
  fi

  if [ -z "$@" ]; then
    echo "Missing commit message, boy!"
    return 0
  fi

  msg=$@
  cmd='git add .; git commit -m "$msg"; git push;'

  __with_prompt $cmd
}

# backup
bak() {
  if test -f "$@"; then
    file=$@

    extension="${file##*.}"
    filename="${file%.*}"
    now=$(date +"%Y-%m-%d-%H-%M-%S")

    cp $file $filename-$now.$extension
  else
    echo "File not found."
  fi
}

# ip, localip, ipif
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"

ipif() {
  if [ -z $@ ]; then ip=$(ip) else ip=$@ fi

  if grep "(([1-9]\d{0,2})\.){3}(?2)" <<< "$ip"; then
    curl ipinfo.io/"$ip"
  else
    ipawk=($(host "$ip" | awk '/address/ { print $NF }'))
    curl ipinfo.io/${ipawk[1]}
  fi
}
