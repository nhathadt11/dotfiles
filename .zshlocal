#alias python=python3
#alias pip=pip3
alias dockeroff='docker stop $(docker ps -aq)'
alias dockeron='docker start $(docker ps -aq)'
alias dockerres='docker restart $(docker ps -aq)'
alias dockerdel='docker rmi $(docker images -q)'
alias dockerkill='docker kill $(docker ps -q)'

alias glNoGraph='git log --color=always --format="%C(auto)%h%d %s %C(black)%C(bold)%cr% C(auto)%an" "$@"'
local _gitLogLineToHash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
local _viewGitLogLine="$_gitLogLineToHash | xargs -I % sh -c 'git show --color=always %'"

# fshow_preview - git commit browser with previews
fgpshow() {
  glNoGraph |
    fzf --no-sort --reverse --tiebreak=index --multi \
        --ansi --preview $_viewGitLogLine \
        --header "enter to view, alt-y to copy hash" \
        --bind "enter:execute:$_viewGitLogLine   | less -R" \
        --bind "alt-y:execute:$_gitLogLineToHash | xclip"
}

# fh - repeat history
fh() {
   print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

# c - browse chrome history
fch() {
  local cols sep google_history open
  cols=$(( COLUMNS / 3 ))
  sep='{::}'

  if [ "$(uname)" = "Darwin" ]; then
    google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
    open=open
  else
    google_history="$HOME/.config/google-chrome/Default/History"
    open=xdg-open
  fi
  cp -f "$google_history" /tmp/h
  sqlite3 -separator $sep /tmp/h \
    "select substr(title, 1, $cols), url
     from urls order by last_visit_time desc" |
  awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
  fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open > /dev/null 2> /dev/null
}

# python simple HTTP server
pssv() {
  python -m SimpleHTTPServer 8000
}
pssv3() {
	python -m http.server 8000
}

# gitignore.io cli
function gi() { curl -L -s https://www.gitignore.io/api/$@ ;}

# file preview
function fzp() {
	fzf --preview 'head -100 {}'
}

# Git branch checkout with fuzzy
fbr() {
  git fetch
  local branches branch
  branches=$(git branch -a) &&
  branch=$(echo "$branches" | fzf +s +m -e) &&
  git checkout $(echo "$branch" | sed "s:.* remotes/origin/::" | sed "s:.* ::")
}

# heroku autocomplete setup
HEROKU_AC_ZSH_SETUP_PATH=/home/nhatha/.cache/heroku/autocomplete/zsh_setup && test -f $HEROKU_AC_ZSH_SETUP_PATH && source $HEROKU_AC_ZSH_SETUP_PATH;

# Android Home
export ANDROID_HOME=$HOME/development/Android/sdk
export ANDROID_SDK_ROOT=$ANDROID_HOME

# Yarn bin
export PATH="$(yarn global bin):$PATH"

# Rgc
[[ -s "/etc/grc.zsh" ]] && source /etc/grc.zsh

# mssql-tools
export PATH="$PATH:/opt/mssql-tools/bin"

# nvm
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# dotnet core
export MSBuildSDKsPath=/opt/dotnet/sdk/$(dotnet --version)/Sdks

# pyenv
export PYENV_ROOT="$HOME/.pyenv"
export PATH="$PYENV_ROOT/bin:$PATH"
if command -v pyenv 1>/dev/null 2>&1; then
  eval "$(pyenv init -)"
fi

# rbenv
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
